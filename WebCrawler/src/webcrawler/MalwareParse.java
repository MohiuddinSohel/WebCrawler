/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package webcrawler;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.Scanner;

//import org.apache.commons.io.IOUtils;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

public class MalwareParse {
	
	/*String malwareReportFilePath;
	
	public MalwareParse(String f) {
		
		malwareReportFilePath = f;
		
	}*/

    public void createAnalysisFile(File malwareReportFilePath, File outFilePath) throws Exception {
    	
    	//String malwareReportFilePath = "/Users/Keshav/Desktop/AvailableMalwareReport.csv";

    	//store the urls from the malware report in a list
    	ArrayList<String> links = urls(malwareReportFilePath);
    	    	
    	//for each url in the list
    	String line;
    	
    	//store rank for each table
    	int var1, var2, var3, var4, var5;
    		
    	//parse the list
    	for(int i = 0; i < links.size(); i++) {
    		
    		//reset all counters each iteration
    		var1 = 0;
    		var2 = 0;
    		var3 = 0;
    		var4 = 0;
    		var5 = 0;
    		
    		line = links.get(i);
    		
    		try {
    			
	    		//skip the malwr links and just deal with HybridAnalysis
	    		while(line.contains("malwr")) {
	    			i++;
	    			line = links.get(i);
	    		}
	    	
    		} catch (Exception e) { break; }
    		
    		append_To_File(/*"/Users/Keshav/Desktop/output_file.txt"*/outFilePath, (line + ","));
 
    		
    		//get the sum of rank for each table for the sample
    		var1 = rank(line, "div#dns-requests", "always", 0);
    		append_To_File(outFilePath, "DNS requests " + var1 + ", ");
    		
    		var2 = rank(line, "div#contacted-hosts", "always", 0);
    		append_To_File(outFilePath, "Contacted hosts " + var2 + ", ");
    		
    		var3 = rank(line, "div#http-traffic", "always", 0);
    		append_To_File(outFilePath, "HTTP traffic " + var3 + ", ");
    		
    		var4 = rank(line, "div#network-memory-forensics", "always", 0);
    		append_To_File(outFilePath, "Memory forensics " + var4 + ", ");
    		
    		var5 = rank(line, "div#network-suricata-alerts", "always", 0);
    		append_To_File(outFilePath, "Emerging threats " + var5 + ", ");
    		
    		//System.out.println(line + "\nRank = " + sumAll(var1, var2, var3, var4, var5) + "\n");
    		
    		//append each url and its rank to output_file.txt
    		append_To_File(outFilePath, ("Rank = " + sumAll(var1, var2, var3, var4, var5) + "\n"));
    		
    	}
    	//}
    	
    	//fileScan.close(); 
    	
    }
    
    /* 
     * Rank based on threats in network analysis tables.
     * Increment rank if a string of interest is found.
     * Or optionally get the size of the table as the rank.
     * 
     * Parameters:
     * url is the webpage of the malware sample.
     * tableTag is the table being examined.
     * check is the string of interest to compare against.
     * colIndex is which column to parse in the table.
     * 
     */
    public int rank(String url, String tableTag, String check, int colIndex) throws Exception {
    	
    	//index to reference each row
    	int index = 1; 
    	//int index = 2;
    	
    	//return value
    	int rank = 0;
    	
    	//to retrieve and compare text in column
    	String columnText; 
    	
    	Document doc = connect_To_Url(url);
    	
    	Elements table = doc.select(tableTag);
    	
    	//if the the table does not exist, the rank is 0
    	if(table.isEmpty()) return 0;
    	
    	else {
    		
    		//get the table
    		table.get(0); 
    		
    		//specify we are parsing rows, referenced by 'tr'
    		Elements rows = table.select("tr"); 
   
    		//a single row
    		Element row; 
    		
    		//to parse the column in each row
    		Elements cols; 
    		
    		//Element test;
    		
    		//if examining 'contacted hosts', or counting each row, return table size
			if(tableTag.equals("div#contacted-hosts") || check.equals("always")) {
				
				if(rows.size() == 0) return 0;
				else return rows.size() - 1;
				
			}
			
			//else continue incrementing the rank based on string comparison
			else {
    	
				while(true) {
    		
					try {
    				
    					//get each successive row as 'index' changes
        				row = rows.get(index); 
        				
        				//select columns
        				cols = row.select("td"); 
        				
        				//get the text in the row & column of interest
        				
        		  		//test = cols.get(colIndex);
        				//System.out.println(test.getElementsByIndexEquals(0).text());
        				/*System.out.println(test.getElementsByIndexEquals(1).text());
        				System.out.println(test.childNode(0).toString()); //this prints the ip address alone
        				columnText = test.text();
        				*/
    					columnText = cols.get(colIndex).text();
    				
    					//see if parsing is working correctly
    					//System.out.println(columnText);
    			   				
    					//increment rank if threat detected
    					if(columnText.equals(check)) rank++; 
    				
    					//otherwise do nothing
    					else;
    				
    					//next row
    					index++;
    					//index += 2; 
    		
	    			//break when there are no more rows
	    			} catch(Exception e) { return rank; } 
    				    	
				}
    		
			} 
			
    	}
			    	
    }
    
    //returns sum of all integers provided
    public int sumAll(int...numbers) {

        int result = 0;
        
        for(int i = 0 ; i < numbers.length; i++) result += numbers[i];
       
        return result;
        
    }
    
    //returns HTML of webpage in String format
    /*public static String get_Html_Stream_Of(String link) {
    		
    	try {
			
			URL url = new URL(link);
			URLConnection con = url.openConnection();
			
			InputStream in = con.getInputStream();
			String encoding = con.getContentEncoding();  
			encoding = encoding == null ? "UTF-8" : encoding;
			String body = IOUtils.toString(in, encoding);
			return body;
			
						
		} catch (Exception e) { return null; }
    	
    }*/
    
    //writes given strings to given files
    /*public static void print_To_File(String fileName, String contents) {
    	
    	try {
    		
	    	PrintWriter writer = new PrintWriter(fileName, "UTF-8");
	 		writer.println(contents);
	 		writer.close();
	 		
    	} catch (Exception e) { System.out.println("Exception"); }    	
    	
    }*/
    
    //append to file
    public void append_To_File(File fileName, String contents) {
    	
    	try {
    	
    	    FileWriter fw = new FileWriter(fileName, true);
    	    fw.write(contents);
    	    fw.close();
    	    
    	}
    	
    	catch(IOException ioe) { System.err.println("IOException: " + ioe.getMessage()); }
    	
    }
    
    //retrieves text content enclosed by HTML tag
    public String retrieve_Content_Of_Tag(String tag, Document webpage) {
    	
    	return webpage.select(tag).first().text();
    	   	
    }
    
    //connect to website and store contents in a Document
    public Document connect_To_Url(String url) {

    	try { 
    		
    		Document d = Jsoup.connect(url).get(); 
    		return d;
    		
    	} catch (Exception e) { return null; }
    	    	
    }
    
    public ArrayList<String> urls(File pathName) {
    
    	//int i = 0;
    	//String[] links;
    	ArrayList<String> l = new ArrayList<String>();
    	
    	try (BufferedReader br = new BufferedReader( new FileReader(pathName) )) {
    		
    		String line;
    		
    		while ((line = br.readLine()) != null) {
    			// process the line.
    			if(line.contains("MD5")) continue;
    			
    			//separate strings in one line with commas and store in array
    			String in[] = line.split(",");
    			
    			//store the second entry of the array in links[]
    			//links[i] = in[2];
    			if(in.length >=3) {
                            l.add(in[2]);
                        }
    			
    			//move to the next index in the links[] array
    			//i++;
    			
    		}
    		
    		br.close();
    		return l;
	    
	    } 
    	
    	catch (FileNotFoundException ex) { return null; } 
    	catch (IOException ex) 			 { return null; }
    
    }
    
    public String getFirstWordOf(String input) {

        for(int i = 0; i < input.length(); i++)
        {
            if(input.charAt(i) == ' ')
            {
                return input.substring(0, i);
            }
        }

        return input; 
    }    
}
